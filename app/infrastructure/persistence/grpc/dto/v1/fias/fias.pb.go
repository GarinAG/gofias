// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: app/interfaces/grpc/proto/v1/fias/fias.proto

package fias

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *GuidRequest) Reset() {
	*x = GuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidRequest) ProtoMessage() {}

func (x *GuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidRequest.ProtoReflect.Descriptor instead.
func (*GuidRequest) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{0}
}

func (x *GuidRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type TermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term string `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Size int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	From int64  `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *TermRequest) Reset() {
	*x = TermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermRequest) ProtoMessage() {}

func (x *TermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermRequest.ProtoReflect.Descriptor instead.
func (*TermRequest) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{1}
}

func (x *TermRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *TermRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TermRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

type TermFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term   string        `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Size   int64         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	From   int64         `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	Filter *FilterObject `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TermFilterRequest) Reset() {
	*x = TermFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermFilterRequest) ProtoMessage() {}

func (x *TermFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermFilterRequest.ProtoReflect.Descriptor instead.
func (*TermFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{2}
}

func (x *TermFilterRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *TermFilterRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TermFilterRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TermFilterRequest) GetFilter() *FilterObject {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SimpleTermFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term   string        `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Size   int64         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Filter *FilterObject `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SimpleTermFilterRequest) Reset() {
	*x = SimpleTermFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTermFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTermFilterRequest) ProtoMessage() {}

func (x *SimpleTermFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTermFilterRequest.ProtoReflect.Descriptor instead.
func (*SimpleTermFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleTermFilterRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SimpleTermFilterRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SimpleTermFilterRequest) GetFilter() *FilterObject {
	if x != nil {
		return x.Filter
	}
	return nil
}

type AddressListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Address `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AddressListResponse) Reset() {
	*x = AddressListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressListResponse) ProtoMessage() {}

func (x *AddressListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressListResponse.ProtoReflect.Descriptor instead.
func (*AddressListResponse) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{4}
}

func (x *AddressListResponse) GetItems() []*Address {
	if x != nil {
		return x.Items
	}
	return nil
}

type FilterObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      *NumberFilter `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	ParentGuid *StringFilter `protobuf:"bytes,2,opt,name=parent_guid,json=parentGuid,proto3" json:"parent_guid,omitempty"`
	KladrId    *StringFilter `protobuf:"bytes,3,opt,name=kladr_id,json=kladrId,proto3" json:"kladr_id,omitempty"`
}

func (x *FilterObject) Reset() {
	*x = FilterObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterObject) ProtoMessage() {}

func (x *FilterObject) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterObject.ProtoReflect.Descriptor instead.
func (*FilterObject) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{5}
}

func (x *FilterObject) GetLevel() *NumberFilter {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *FilterObject) GetParentGuid() *StringFilter {
	if x != nil {
		return x.ParentGuid
	}
	return nil
}

func (x *FilterObject) GetKladrId() *StringFilter {
	if x != nil {
		return x.KladrId
	}
	return nil
}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{6}
}

func (x *StringFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type NumberFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Min    float32   `protobuf:"fixed32,2,opt,name=min,proto3" json:"min,omitempty"`
	Max    float32   `protobuf:"fixed32,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *NumberFilter) Reset() {
	*x = NumberFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberFilter) ProtoMessage() {}

func (x *NumberFilter) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberFilter.ProtoReflect.Descriptor instead.
func (*NumberFilter) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{7}
}

func (x *NumberFilter) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *NumberFilter) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumberFilter) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FiasId            string  `protobuf:"bytes,2,opt,name=FiasId,proto3" json:"FiasId,omitempty"`
	FiasLevel         string  `protobuf:"bytes,3,opt,name=FiasLevel,proto3" json:"FiasLevel,omitempty"`
	ParentFiasId      string  `protobuf:"bytes,4,opt,name=ParentFiasId,proto3" json:"ParentFiasId,omitempty"`
	ShortName         string  `protobuf:"bytes,5,opt,name=ShortName,proto3" json:"ShortName,omitempty"`
	FormalName        string  `protobuf:"bytes,6,opt,name=FormalName,proto3" json:"FormalName,omitempty"`
	PostalCode        string  `protobuf:"bytes,7,opt,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	FullName          string  `protobuf:"bytes,8,opt,name=FullName,proto3" json:"FullName,omitempty"`
	FullAddress       string  `protobuf:"bytes,9,opt,name=FullAddress,proto3" json:"FullAddress,omitempty"`
	KladrId           string  `protobuf:"bytes,10,opt,name=KladrId,proto3" json:"KladrId,omitempty"`
	RegionFiasId      string  `protobuf:"bytes,11,opt,name=RegionFiasId,proto3" json:"RegionFiasId,omitempty"`
	RegionKladrId     string  `protobuf:"bytes,12,opt,name=RegionKladrId,proto3" json:"RegionKladrId,omitempty"`
	Region            string  `protobuf:"bytes,13,opt,name=Region,proto3" json:"Region,omitempty"`
	RegionType        string  `protobuf:"bytes,14,opt,name=RegionType,proto3" json:"RegionType,omitempty"`
	RegionFull        string  `protobuf:"bytes,15,opt,name=RegionFull,proto3" json:"RegionFull,omitempty"`
	AreaFiasId        string  `protobuf:"bytes,16,opt,name=AreaFiasId,proto3" json:"AreaFiasId,omitempty"`
	AreaKladrId       string  `protobuf:"bytes,17,opt,name=AreaKladrId,proto3" json:"AreaKladrId,omitempty"`
	Area              string  `protobuf:"bytes,18,opt,name=Area,proto3" json:"Area,omitempty"`
	AreaType          string  `protobuf:"bytes,19,opt,name=AreaType,proto3" json:"AreaType,omitempty"`
	AreaFull          string  `protobuf:"bytes,20,opt,name=AreaFull,proto3" json:"AreaFull,omitempty"`
	CityFiasId        string  `protobuf:"bytes,21,opt,name=CityFiasId,proto3" json:"CityFiasId,omitempty"`
	CityKladrId       string  `protobuf:"bytes,22,opt,name=CityKladrId,proto3" json:"CityKladrId,omitempty"`
	City              string  `protobuf:"bytes,23,opt,name=City,proto3" json:"City,omitempty"`
	CityType          string  `protobuf:"bytes,24,opt,name=CityType,proto3" json:"CityType,omitempty"`
	CityFull          string  `protobuf:"bytes,25,opt,name=CityFull,proto3" json:"CityFull,omitempty"`
	SettlementFiasId  string  `protobuf:"bytes,26,opt,name=SettlementFiasId,proto3" json:"SettlementFiasId,omitempty"`
	SettlementKladrId string  `protobuf:"bytes,27,opt,name=SettlementKladrId,proto3" json:"SettlementKladrId,omitempty"`
	Settlement        string  `protobuf:"bytes,28,opt,name=Settlement,proto3" json:"Settlement,omitempty"`
	SettlementType    string  `protobuf:"bytes,29,opt,name=SettlementType,proto3" json:"SettlementType,omitempty"`
	SettlementFull    string  `protobuf:"bytes,30,opt,name=SettlementFull,proto3" json:"SettlementFull,omitempty"`
	StreetFiasId      string  `protobuf:"bytes,31,opt,name=StreetFiasId,proto3" json:"StreetFiasId,omitempty"`
	StreetKladrId     string  `protobuf:"bytes,32,opt,name=StreetKladrId,proto3" json:"StreetKladrId,omitempty"`
	Street            string  `protobuf:"bytes,33,opt,name=Street,proto3" json:"Street,omitempty"`
	StreetType        string  `protobuf:"bytes,34,opt,name=StreetType,proto3" json:"StreetType,omitempty"`
	StreetFull        string  `protobuf:"bytes,35,opt,name=StreetFull,proto3" json:"StreetFull,omitempty"`
	HouseFiasId       string  `protobuf:"bytes,36,opt,name=HouseFiasId,proto3" json:"HouseFiasId,omitempty"`
	HouseKladrId      string  `protobuf:"bytes,37,opt,name=HouseKladrId,proto3" json:"HouseKladrId,omitempty"`
	House             string  `protobuf:"bytes,38,opt,name=House,proto3" json:"House,omitempty"`
	HouseType         string  `protobuf:"bytes,39,opt,name=HouseType,proto3" json:"HouseType,omitempty"`
	HouseFull         string  `protobuf:"bytes,40,opt,name=HouseFull,proto3" json:"HouseFull,omitempty"`
	GeoLat            float32 `protobuf:"fixed32,41,opt,name=GeoLat,proto3" json:"GeoLat,omitempty"`
	GeoLon            float32 `protobuf:"fixed32,42,opt,name=GeoLon,proto3" json:"GeoLon,omitempty"`
	Okato             string  `protobuf:"bytes,43,opt,name=Okato,proto3" json:"Okato,omitempty"`
	Oktmo             string  `protobuf:"bytes,44,opt,name=Oktmo,proto3" json:"Oktmo,omitempty"`
	UpdatedDate       string  `protobuf:"bytes,45,opt,name=UpdatedDate,proto3" json:"UpdatedDate,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{8}
}

func (x *Address) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Address) GetFiasId() string {
	if x != nil {
		return x.FiasId
	}
	return ""
}

func (x *Address) GetFiasLevel() string {
	if x != nil {
		return x.FiasLevel
	}
	return ""
}

func (x *Address) GetParentFiasId() string {
	if x != nil {
		return x.ParentFiasId
	}
	return ""
}

func (x *Address) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Address) GetFormalName() string {
	if x != nil {
		return x.FormalName
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Address) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *Address) GetKladrId() string {
	if x != nil {
		return x.KladrId
	}
	return ""
}

func (x *Address) GetRegionFiasId() string {
	if x != nil {
		return x.RegionFiasId
	}
	return ""
}

func (x *Address) GetRegionKladrId() string {
	if x != nil {
		return x.RegionKladrId
	}
	return ""
}

func (x *Address) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Address) GetRegionType() string {
	if x != nil {
		return x.RegionType
	}
	return ""
}

func (x *Address) GetRegionFull() string {
	if x != nil {
		return x.RegionFull
	}
	return ""
}

func (x *Address) GetAreaFiasId() string {
	if x != nil {
		return x.AreaFiasId
	}
	return ""
}

func (x *Address) GetAreaKladrId() string {
	if x != nil {
		return x.AreaKladrId
	}
	return ""
}

func (x *Address) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Address) GetAreaType() string {
	if x != nil {
		return x.AreaType
	}
	return ""
}

func (x *Address) GetAreaFull() string {
	if x != nil {
		return x.AreaFull
	}
	return ""
}

func (x *Address) GetCityFiasId() string {
	if x != nil {
		return x.CityFiasId
	}
	return ""
}

func (x *Address) GetCityKladrId() string {
	if x != nil {
		return x.CityKladrId
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetCityType() string {
	if x != nil {
		return x.CityType
	}
	return ""
}

func (x *Address) GetCityFull() string {
	if x != nil {
		return x.CityFull
	}
	return ""
}

func (x *Address) GetSettlementFiasId() string {
	if x != nil {
		return x.SettlementFiasId
	}
	return ""
}

func (x *Address) GetSettlementKladrId() string {
	if x != nil {
		return x.SettlementKladrId
	}
	return ""
}

func (x *Address) GetSettlement() string {
	if x != nil {
		return x.Settlement
	}
	return ""
}

func (x *Address) GetSettlementType() string {
	if x != nil {
		return x.SettlementType
	}
	return ""
}

func (x *Address) GetSettlementFull() string {
	if x != nil {
		return x.SettlementFull
	}
	return ""
}

func (x *Address) GetStreetFiasId() string {
	if x != nil {
		return x.StreetFiasId
	}
	return ""
}

func (x *Address) GetStreetKladrId() string {
	if x != nil {
		return x.StreetKladrId
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetStreetType() string {
	if x != nil {
		return x.StreetType
	}
	return ""
}

func (x *Address) GetStreetFull() string {
	if x != nil {
		return x.StreetFull
	}
	return ""
}

func (x *Address) GetHouseFiasId() string {
	if x != nil {
		return x.HouseFiasId
	}
	return ""
}

func (x *Address) GetHouseKladrId() string {
	if x != nil {
		return x.HouseKladrId
	}
	return ""
}

func (x *Address) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *Address) GetHouseType() string {
	if x != nil {
		return x.HouseType
	}
	return ""
}

func (x *Address) GetHouseFull() string {
	if x != nil {
		return x.HouseFull
	}
	return ""
}

func (x *Address) GetGeoLat() float32 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *Address) GetGeoLon() float32 {
	if x != nil {
		return x.GeoLon
	}
	return 0
}

func (x *Address) GetOkato() string {
	if x != nil {
		return x.Okato
	}
	return ""
}

func (x *Address) GetOktmo() string {
	if x != nil {
		return x.Oktmo
	}
	return ""
}

func (x *Address) GetUpdatedDate() string {
	if x != nil {
		return x.UpdatedDate
	}
	return ""
}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uptime               int64   `protobuf:"varint,1,opt,name=Uptime,proto3" json:"Uptime,omitempty"`
	AllocatedMemory      float32 `protobuf:"fixed32,2,opt,name=AllocatedMemory,proto3" json:"AllocatedMemory,omitempty"`
	TotalAllocatedMemory float32 `protobuf:"fixed32,3,opt,name=TotalAllocatedMemory,proto3" json:"TotalAllocatedMemory,omitempty"`
	Goroutines           int32   `protobuf:"varint,4,opt,name=Goroutines,proto3" json:"Goroutines,omitempty"`
	GCCycles             uint32  `protobuf:"varint,5,opt,name=GCCycles,proto3" json:"GCCycles,omitempty"`
	NumberOfCPUs         int32   `protobuf:"varint,6,opt,name=NumberOfCPUs,proto3" json:"NumberOfCPUs,omitempty"`
	HeapSys              float32 `protobuf:"fixed32,7,opt,name=HeapSys,proto3" json:"HeapSys,omitempty"`
	HeapAllocated        float32 `protobuf:"fixed32,8,opt,name=HeapAllocated,proto3" json:"HeapAllocated,omitempty"`
	ObjectsInUse         uint64  `protobuf:"varint,9,opt,name=ObjectsInUse,proto3" json:"ObjectsInUse,omitempty"`
	OSMemoryObtained     float32 `protobuf:"fixed32,10,opt,name=OSMemoryObtained,proto3" json:"OSMemoryObtained,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{9}
}

func (x *Health) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Health) GetAllocatedMemory() float32 {
	if x != nil {
		return x.AllocatedMemory
	}
	return 0
}

func (x *Health) GetTotalAllocatedMemory() float32 {
	if x != nil {
		return x.TotalAllocatedMemory
	}
	return 0
}

func (x *Health) GetGoroutines() int32 {
	if x != nil {
		return x.Goroutines
	}
	return 0
}

func (x *Health) GetGCCycles() uint32 {
	if x != nil {
		return x.GCCycles
	}
	return 0
}

func (x *Health) GetNumberOfCPUs() int32 {
	if x != nil {
		return x.NumberOfCPUs
	}
	return 0
}

func (x *Health) GetHeapSys() float32 {
	if x != nil {
		return x.HeapSys
	}
	return 0
}

func (x *Health) GetHeapAllocated() float32 {
	if x != nil {
		return x.HeapAllocated
	}
	return 0
}

func (x *Health) GetObjectsInUse() uint64 {
	if x != nil {
		return x.ObjectsInUse
	}
	return 0
}

func (x *Health) GetOSMemoryObtained() float32 {
	if x != nil {
		return x.OSMemoryObtained
	}
	return 0
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion string `protobuf:"bytes,1,opt,name=ServerVersion,proto3" json:"ServerVersion,omitempty"`
	GrpcVersion   string `protobuf:"bytes,2,opt,name=GrpcVersion,proto3" json:"GrpcVersion,omitempty"`
	FiasVersion   string `protobuf:"bytes,3,opt,name=FiasVersion,proto3" json:"FiasVersion,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP(), []int{10}
}

func (x *Version) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *Version) GetGrpcVersion() string {
	if x != nil {
		return x.GrpcVersion
	}
	return ""
}

func (x *Version) GetFiasVersion() string {
	if x != nil {
		return x.FiasVersion
	}
	return ""
}

var File_app_interfaces_grpc_proto_v1_fias_fias_proto protoreflect.FileDescriptor

var file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x70, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x61, 0x73, 0x2f, 0x66, 0x69, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x21, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x0c, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba,
	0xd0, 0xb2, 0xd0, 0xb0, 0xd2, 0x01, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x67, 0x65, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x72,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x3a, 0x0c, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd2,
	0x01, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x13, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x3a, 0x0c, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd2,
	0x01, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x13, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3d,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe8, 0x01,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x51,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32,
	0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x69, 0x61, 0x73, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x08, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x52,
	0x07, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xe9, 0x0a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x61,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69,
	0x61, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x6c, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x6c, 0x61, 0x64, 0x72,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x61, 0x73, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b,
	0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6c,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x61, 0x73, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x61,
	0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x4b, 0x6c, 0x61, 0x64, 0x72,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x4b, 0x6c,
	0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x65, 0x61, 0x46, 0x75, 0x6c,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x72, 0x65, 0x61, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x69, 0x74, 0x79, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x69, 0x74, 0x79, 0x46, 0x69, 0x61, 0x73, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x69, 0x74, 0x79, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x69, 0x74, 0x79, 0x4b, 0x6c, 0x61, 0x64,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x61,
	0x73, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4b, 0x6c, 0x61, 0x64,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x47, 0x65, 0x6f,
	0x4c, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x6b, 0x61, 0x74, 0x6f, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4f, 0x6b, 0x61, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x6b, 0x74,
	0x6d, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x6b, 0x74, 0x6d, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xee, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x32,
	0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x43, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x47, 0x43, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x50, 0x55, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x50,
	0x55, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x70, 0x53, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x48, 0x65, 0x61, 0x70, 0x53, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x53, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x4f, 0x53, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x22, 0x73, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x61, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x61, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x58, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x32, 0x5a, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x66, 0x69, 0x61, 0x73,
	0x5f, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xa0, 0x05,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x01, 0x2a,
	0x5a, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x6f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x2f, 0x7b, 0x74, 0x65, 0x72, 0x6d, 0x7d, 0x12, 0x53, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x47, 0x75, 0x69, 0x64, 0x12, 0x14, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x66,
	0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x67, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x5c,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x14, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x12, 0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x20, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x12, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x42, 0xf5, 0x03, 0x5a, 0x07, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x61, 0x73, 0x92, 0x41, 0xe8, 0x03,
	0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x46, 0x69, 0x61, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x2f, 0x67, 0x6f, 0x66, 0x69, 0x61, 0x73, 0x1a, 0x11, 0x67, 0x61, 0x72, 0x69, 0x6e,
	0x40, 0x61, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x65, 0x61, 0x2e, 0x72, 0x75, 0x2a, 0x4a, 0x0a, 0x0b,
	0x4d, 0x49, 0x54, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x67, 0x6f, 0x66, 0x69, 0x61,
	0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x2e, 0x4d, 0x44, 0x32, 0x03, 0x33, 0x2e, 0x30, 0x2a, 0x02, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x69, 0x0a, 0x47,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x12, 0x1e, 0x0a, 0x1c, 0x1a, 0x1a, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x53, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x4c,
	0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x1e, 0x0a, 0x1c,
	0x1a, 0x1a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x4a, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x43, 0x0a, 0x21, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x62, 0x61, 0x64, 0x2e, 0x12, 0x1e, 0x0a, 0x1c, 0x1a, 0x1a, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescOnce sync.Once
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescData = file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDesc
)

func file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescGZIP() []byte {
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescOnce.Do(func() {
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescData)
	})
	return file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDescData
}

var file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_app_interfaces_grpc_proto_v1_fias_fias_proto_goTypes = []interface{}{
	(*GuidRequest)(nil),             // 0: fias_v1.GuidRequest
	(*TermRequest)(nil),             // 1: fias_v1.TermRequest
	(*TermFilterRequest)(nil),       // 2: fias_v1.TermFilterRequest
	(*SimpleTermFilterRequest)(nil), // 3: fias_v1.SimpleTermFilterRequest
	(*AddressListResponse)(nil),     // 4: fias_v1.AddressListResponse
	(*FilterObject)(nil),            // 5: fias_v1.FilterObject
	(*StringFilter)(nil),            // 6: fias_v1.StringFilter
	(*NumberFilter)(nil),            // 7: fias_v1.NumberFilter
	(*Address)(nil),                 // 8: fias_v1.Address
	(*Health)(nil),                  // 9: fias_v1.Health
	(*Version)(nil),                 // 10: fias_v1.Version
	(*empty.Empty)(nil),             // 11: google.protobuf.Empty
}
var file_app_interfaces_grpc_proto_v1_fias_fias_proto_depIdxs = []int32{
	5,  // 0: fias_v1.TermFilterRequest.filter:type_name -> fias_v1.FilterObject
	5,  // 1: fias_v1.SimpleTermFilterRequest.filter:type_name -> fias_v1.FilterObject
	8,  // 2: fias_v1.AddressListResponse.items:type_name -> fias_v1.Address
	7,  // 3: fias_v1.FilterObject.level:type_name -> fias_v1.NumberFilter
	6,  // 4: fias_v1.FilterObject.parent_guid:type_name -> fias_v1.StringFilter
	6,  // 5: fias_v1.FilterObject.kladr_id:type_name -> fias_v1.StringFilter
	11, // 6: fias_v1.HealthService.CheckHealth:input_type -> google.protobuf.Empty
	11, // 7: fias_v1.VersionService.GetVersion:input_type -> google.protobuf.Empty
	2,  // 8: fias_v1.AddressService.GetAddressByTerm:input_type -> fias_v1.TermFilterRequest
	1,  // 9: fias_v1.AddressService.GetAddressByPostal:input_type -> fias_v1.TermRequest
	0,  // 10: fias_v1.AddressService.GetByGuid:input_type -> fias_v1.GuidRequest
	11, // 11: fias_v1.AddressService.GetAllCities:input_type -> google.protobuf.Empty
	1,  // 12: fias_v1.AddressService.GetCitiesByTerm:input_type -> fias_v1.TermRequest
	3,  // 13: fias_v1.AddressService.GetSuggests:input_type -> fias_v1.SimpleTermFilterRequest
	9,  // 14: fias_v1.HealthService.CheckHealth:output_type -> fias_v1.Health
	10, // 15: fias_v1.VersionService.GetVersion:output_type -> fias_v1.Version
	4,  // 16: fias_v1.AddressService.GetAddressByTerm:output_type -> fias_v1.AddressListResponse
	4,  // 17: fias_v1.AddressService.GetAddressByPostal:output_type -> fias_v1.AddressListResponse
	8,  // 18: fias_v1.AddressService.GetByGuid:output_type -> fias_v1.Address
	4,  // 19: fias_v1.AddressService.GetAllCities:output_type -> fias_v1.AddressListResponse
	4,  // 20: fias_v1.AddressService.GetCitiesByTerm:output_type -> fias_v1.AddressListResponse
	4,  // 21: fias_v1.AddressService.GetSuggests:output_type -> fias_v1.AddressListResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_app_interfaces_grpc_proto_v1_fias_fias_proto_init() }
func file_app_interfaces_grpc_proto_v1_fias_fias_proto_init() {
	if File_app_interfaces_grpc_proto_v1_fias_fias_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTermFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_app_interfaces_grpc_proto_v1_fias_fias_proto_goTypes,
		DependencyIndexes: file_app_interfaces_grpc_proto_v1_fias_fias_proto_depIdxs,
		MessageInfos:      file_app_interfaces_grpc_proto_v1_fias_fias_proto_msgTypes,
	}.Build()
	File_app_interfaces_grpc_proto_v1_fias_fias_proto = out.File
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_rawDesc = nil
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_goTypes = nil
	file_app_interfaces_grpc_proto_v1_fias_fias_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthServiceClient interface {
	CheckHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) CheckHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/fias_v1.HealthService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
type HealthServiceServer interface {
	CheckHealth(context.Context, *empty.Empty) (*Health, error)
}

// UnimplementedHealthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (*UnimplementedHealthServiceServer) CheckHealth(context.Context, *empty.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.HealthService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).CheckHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fias_v1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _HealthService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interfaces/grpc/proto/v1/fias/fias.proto",
}

// VersionServiceClient is the client API for VersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionServiceClient interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error)
}

type versionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionServiceClient(cc grpc.ClientConnInterface) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/fias_v1.VersionService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServiceServer is the server API for VersionService service.
type VersionServiceServer interface {
	GetVersion(context.Context, *empty.Empty) (*Version, error)
}

// UnimplementedVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersionServiceServer struct {
}

func (*UnimplementedVersionServiceServer) GetVersion(context.Context, *empty.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.VersionService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fias_v1.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _VersionService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interfaces/grpc/proto/v1/fias/fias.proto",
}

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddressServiceClient interface {
	GetAddressByTerm(ctx context.Context, in *TermFilterRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
	GetAddressByPostal(ctx context.Context, in *TermRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
	GetByGuid(ctx context.Context, in *GuidRequest, opts ...grpc.CallOption) (*Address, error)
	GetAllCities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AddressListResponse, error)
	GetCitiesByTerm(ctx context.Context, in *TermRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
	GetSuggests(ctx context.Context, in *SimpleTermFilterRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) GetAddressByTerm(ctx context.Context, in *TermFilterRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetAddressByTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressByPostal(ctx context.Context, in *TermRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetAddressByPostal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetByGuid(ctx context.Context, in *GuidRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetByGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAllCities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetAllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetCitiesByTerm(ctx context.Context, in *TermRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetCitiesByTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetSuggests(ctx context.Context, in *SimpleTermFilterRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/fias_v1.AddressService/GetSuggests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
type AddressServiceServer interface {
	GetAddressByTerm(context.Context, *TermFilterRequest) (*AddressListResponse, error)
	GetAddressByPostal(context.Context, *TermRequest) (*AddressListResponse, error)
	GetByGuid(context.Context, *GuidRequest) (*Address, error)
	GetAllCities(context.Context, *empty.Empty) (*AddressListResponse, error)
	GetCitiesByTerm(context.Context, *TermRequest) (*AddressListResponse, error)
	GetSuggests(context.Context, *SimpleTermFilterRequest) (*AddressListResponse, error)
}

// UnimplementedAddressServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (*UnimplementedAddressServiceServer) GetAddressByTerm(context.Context, *TermFilterRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByTerm not implemented")
}
func (*UnimplementedAddressServiceServer) GetAddressByPostal(context.Context, *TermRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByPostal not implemented")
}
func (*UnimplementedAddressServiceServer) GetByGuid(context.Context, *GuidRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGuid not implemented")
}
func (*UnimplementedAddressServiceServer) GetAllCities(context.Context, *empty.Empty) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCities not implemented")
}
func (*UnimplementedAddressServiceServer) GetCitiesByTerm(context.Context, *TermRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCitiesByTerm not implemented")
}
func (*UnimplementedAddressServiceServer) GetSuggests(context.Context, *SimpleTermFilterRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggests not implemented")
}

func RegisterAddressServiceServer(s *grpc.Server, srv AddressServiceServer) {
	s.RegisterService(&_AddressService_serviceDesc, srv)
}

func _AddressService_GetAddressByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TermFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetAddressByTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressByTerm(ctx, req.(*TermFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressByPostal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressByPostal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetAddressByPostal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressByPostal(ctx, req.(*TermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetByGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetByGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetByGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetByGuid(ctx, req.(*GuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetAllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAllCities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetCitiesByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetCitiesByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetCitiesByTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetCitiesByTerm(ctx, req.(*TermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetSuggests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTermFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetSuggests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fias_v1.AddressService/GetSuggests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetSuggests(ctx, req.(*SimpleTermFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddressService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fias_v1.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddressByTerm",
			Handler:    _AddressService_GetAddressByTerm_Handler,
		},
		{
			MethodName: "GetAddressByPostal",
			Handler:    _AddressService_GetAddressByPostal_Handler,
		},
		{
			MethodName: "GetByGuid",
			Handler:    _AddressService_GetByGuid_Handler,
		},
		{
			MethodName: "GetAllCities",
			Handler:    _AddressService_GetAllCities_Handler,
		},
		{
			MethodName: "GetCitiesByTerm",
			Handler:    _AddressService_GetCitiesByTerm_Handler,
		},
		{
			MethodName: "GetSuggests",
			Handler:    _AddressService_GetSuggests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interfaces/grpc/proto/v1/fias/fias.proto",
}
